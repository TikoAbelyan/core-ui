{"ast":null,"code":"import _toConsumableArray from \"/home/tiko/Desktop/Ready/Sandbox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/tiko/Desktop/Ready/Sandbox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tiko/Desktop/Ready/Sandbox/src/components/Chart.js\";\n\nimport React from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils/src\";\nimport { number } from \"prop-types\";\nvar brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nvar MainChart = function MainChart(_ref) {\n  var chartData = _ref.chartData;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      _React$useState2$ = _React$useState2[0],\n      _React$useState2$$xAx = _React$useState2$.xAxis,\n      xAxis = _React$useState2$$xAx === void 0 ? [] : _React$useState2$$xAx,\n      _React$useState2$$yAx = _React$useState2$.yAxis,\n      yAxis = _React$useState2$$yAx === void 0 ? [] : _React$useState2$$yAx,\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    // chartData[0].data.forEach(([f, s]) => pz.push(f, s))\n    return chartData[0].data.reduce(function (acc, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          first = _ref3[0],\n          second = _ref3[1];\n\n      acc.xAxis.push(first);\n      acc.yAxis.push(second);\n      return acc;\n    }, {\n      xAxis: [],\n      yAxis: []\n    });\n  }, []);\n\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }; // const pz = [];\n  // if (arr && arr[0] && arr[0].data) {\n  //   arr[0].data.forEach(([f, s]) => pz.push(f, s))\n  // }\n  // console.log(\"pzzzzz =>\", pz);\n  // const arr5 = [];\n  // const arr6 = [];\n  // for (let x = 0; x < pz.length; x += 2) {\n  //   arr5.push(pz[x]);\n  // }\n  // for (let x = 1; x < pz.length; x += 2) {\n  //   arr6.push(pz[x]);\n  // }\n  // console.log(\"arr5=>\", arr5);\n  // console.log(\"arr6=>\", arr6);\n\n\n  var defaultDatasets = function () {\n    var elements = 27;\n    var data = [];\n\n    for (var i = 0; i <= elements; i++) {\n      data.push.apply(data, _toConsumableArray(yAxis));\n    }\n\n    return [{\n      label: \"My First dataset\",\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: brandInfo,\n      borderWidth: 2,\n      data: data\n    }];\n  }();\n\n  var defaultOptions = function () {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: 5,\n            stepSize: Math.ceil(250 / 5),\n            max: 2000\n          },\n          gridLines: {\n            display: true\n          }\n        }]\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n  }();\n\n  var azz = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"]; // console.log(\"refer\", arr6);\n  // render\n\n  return /*#__PURE__*/React.createElement(CChartLine, {\n    style: {\n      height: \"300px\",\n      marginTop: \"40px\"\n    },\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: xAxis,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default MainChart;","map":{"version":3,"sources":["/home/tiko/Desktop/Ready/Sandbox/src/components/Chart.js"],"names":["React","CChartLine","getStyle","hexToRgba","number","brandInfo","MainChart","chartData","useState","xAxis","yAxis","setState","useEffect","data","reduce","acc","first","second","push","random","min","max","Math","floor","defaultDatasets","elements","i","label","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","point","radius","hitRadius","hoverRadius","hoverBorderWidth","azz","height","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils/src\";\nimport { number } from \"prop-types\";\n\nconst brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nconst MainChart = ({ chartData }) => {\n  const [{ xAxis = [], yAxis = [] }, setState] = React.useState(null);\n  React.useEffect(() => {\n    // chartData[0].data.forEach(([f, s]) => pz.push(f, s))\n    return chartData[0].data.reduce(\n      (acc, [first, second]) => {\n        acc.xAxis.push(first);\n        acc.yAxis.push(second);\n        return acc;\n      },\n      { xAxis: [], yAxis: [] }\n    );\n  }, []);\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  // const pz = [];\n\n  // if (arr && arr[0] && arr[0].data) {\n  //   arr[0].data.forEach(([f, s]) => pz.push(f, s))\n  // }\n\n  // console.log(\"pzzzzz =>\", pz);\n  // const arr5 = [];\n  // const arr6 = [];\n  // for (let x = 0; x < pz.length; x += 2) {\n  //   arr5.push(pz[x]);\n  // }\n  // for (let x = 1; x < pz.length; x += 2) {\n  //   arr6.push(pz[x]);\n  // }\n  // console.log(\"arr5=>\", arr5);\n  // console.log(\"arr6=>\", arr6);\n  const defaultDatasets = (() => {\n    let elements = 27;\n    const data = [];\n    for (let i = 0; i <= elements; i++) {\n      data.push(...yAxis);\n    }\n\n    return [\n      {\n        label: \"My First dataset\",\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data,\n      },\n    ];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              drawOnChartArea: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 2000,\n            },\n            gridLines: {\n              display: true,\n            },\n          },\n        ],\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3,\n        },\n      },\n    };\n  })();\n  const azz = [\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n  ];\n  // console.log(\"refer\", arr6);\n  // render\n\n  return (\n    <CChartLine\n      style={{ height: \"300px\", marginTop: \"40px\" }}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={xAxis}\n    />\n  );\n};\n\nexport default MainChart;\n"]},"metadata":{},"sourceType":"module"}