{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/tiko/Desktop/Ready/Sandbox/src/components/Chart.js\";\n\nimport React from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils/src\";\nimport { toString } from \"core-js/fn/number/epsilon\";\nvar brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nvar MainChart = function MainChart(attributes) {\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  var arr = [{\n    chartConfig: {\n      input: 1,\n      chartType: \"column\",\n      textToShow: \"Well\",\n      inputType: \"Well\",\n      dateFormat: \"%s/%s/%s %s:%s\"\n    },\n    data: [[\"01/08/20 00:00\", 595], [\"02/08/20 00:00\", 975], [\"03/08/20 00:00\", 1032], [\"04/08/20 00:00\", 2408], [\"05/08/20 00:00\", 1875], [\"06/08/20 00:00\", 338], [\"07/08/20 00:00\", 799], [\"08/08/20 00:00\", 1293], [\"09/08/20 00:00\", 899], [\"10/08/20 00:00\", 845], [\"11/08/20 00:00\", 15], [\"12/08/20 00:00\", 1579], [\"13/08/20 00:00\", 1095], [\"14/08/20 00:00\", 1221], [\"15/08/20 00:00\", 775]]\n  }];\n  console.log(arr[0].data);\n\n  var defaultDatasets = function () {\n    var pz = []; // for (let p = 0; p <= arr[0].data.length; p++) {\n    //   console.log(\"checking =>\", arr[0].data[p]);\n    // }\n    // console.log(\"arr\", arr[0].data[0][1]);\n    // console.log(\"length\", arr[0].data.length);\n    // arr.map((item, index) => console.log(pz.push(item.data[index][1])));\n    // console.log(pz);\n\n    for (var i = 0; i < arr[0].data.length; i++) {\n      // get the size of the inner array\n      var innerArrayLength = arr[0].data[i].length; // loop the inner array\n\n      for (var j = 0; j < innerArrayLength; j++) {\n        console.log(arr[0].data[i][j].includes(toString)); // pz.push(arr[0].data[i][j]);\n      }\n    }\n\n    console.log(pz);\n    var elements = 27;\n    var data = [];\n\n    for (var _i = 0; _i <= elements; _i++) {\n      data.push(random(80, 220));\n    } // console.log(data);\n\n\n    return [{\n      label: \"My First dataset\",\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: brandInfo,\n      borderWidth: 2,\n      data: data\n    }];\n  }();\n\n  var defaultOptions = function () {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            drawOnChartArea: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            maxTicksLimit: 5,\n            stepSize: Math.ceil(250 / 5),\n            max: 5000\n          },\n          gridLines: {\n            display: true\n          }\n        }]\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n  }(); // render\n\n\n  return /*#__PURE__*/React.createElement(CChartLine, Object.assign({}, attributes, {\n    datasets: defaultDatasets,\n    options: defaultOptions,\n    labels: [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default MainChart;","map":{"version":3,"sources":["/home/tiko/Desktop/Ready/Sandbox/src/components/Chart.js"],"names":["React","CChartLine","getStyle","hexToRgba","toString","brandInfo","MainChart","attributes","random","min","max","Math","floor","arr","chartConfig","input","chartType","textToShow","inputType","dateFormat","data","console","log","defaultDatasets","pz","i","length","innerArrayLength","j","includes","elements","push","label","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","point","radius","hitRadius","hoverRadius","hoverBorderWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CChartLine } from \"@coreui/react-chartjs\";\nimport { getStyle, hexToRgba } from \"@coreui/utils/src\";\nimport { toString } from \"core-js/fn/number/epsilon\";\n\nconst brandInfo = getStyle(\"info\") || \"#20a8d8\";\n\nconst MainChart = (attributes) => {\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const arr = [\n    {\n      chartConfig: {\n        input: 1,\n        chartType: \"column\",\n        textToShow: \"Well\",\n        inputType: \"Well\",\n        dateFormat: \"%s/%s/%s %s:%s\",\n      },\n      data: [\n        [\"01/08/20 00:00\", 595],\n        [\"02/08/20 00:00\", 975],\n        [\"03/08/20 00:00\", 1032],\n        [\"04/08/20 00:00\", 2408],\n        [\"05/08/20 00:00\", 1875],\n        [\"06/08/20 00:00\", 338],\n        [\"07/08/20 00:00\", 799],\n        [\"08/08/20 00:00\", 1293],\n        [\"09/08/20 00:00\", 899],\n        [\"10/08/20 00:00\", 845],\n        [\"11/08/20 00:00\", 15],\n        [\"12/08/20 00:00\", 1579],\n        [\"13/08/20 00:00\", 1095],\n        [\"14/08/20 00:00\", 1221],\n        [\"15/08/20 00:00\", 775],\n      ],\n    },\n  ];\n  console.log(arr[0].data);\n\n  const defaultDatasets = (() => {\n    const pz = [];\n    // for (let p = 0; p <= arr[0].data.length; p++) {\n    //   console.log(\"checking =>\", arr[0].data[p]);\n    // }\n    // console.log(\"arr\", arr[0].data[0][1]);\n    // console.log(\"length\", arr[0].data.length);\n    // arr.map((item, index) => console.log(pz.push(item.data[index][1])));\n    // console.log(pz);\n    for (let i = 0; i < arr[0].data.length; i++) {\n      // get the size of the inner array\n      var innerArrayLength = arr[0].data[i].length;\n      // loop the inner array\n      for (let j = 0; j < innerArrayLength; j++) {\n        console.log(arr[0].data[i][j].includes(toString));\n        // pz.push(arr[0].data[i][j]);\n      }\n    }\n    console.log(pz);\n    let elements = 27;\n    const data = [];\n    for (let i = 0; i <= elements; i++) {\n      data.push(random(80, 220));\n    }\n    // console.log(data);\n    return [\n      {\n        label: \"My First dataset\",\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data,\n      },\n    ];\n  })();\n\n  const defaultOptions = (() => {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              drawOnChartArea: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 5000,\n            },\n            gridLines: {\n              display: true,\n            },\n          },\n        ],\n      },\n      elements: {\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3,\n        },\n      },\n    };\n  })();\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={[\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\",\n        \"Su\",\n      ]}\n    />\n  );\n};\n\nexport default MainChart;\n"]},"metadata":{},"sourceType":"module"}