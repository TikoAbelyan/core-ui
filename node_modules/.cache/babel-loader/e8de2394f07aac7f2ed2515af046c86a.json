{"ast":null,"code":"import _slicedToArray from \"/home/tiko/Desktop/Ready/Sandbox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tiko/Desktop/Ready/Sandbox/src/pages/Dashboard.js\";\n\nimport React from \"react\";\nimport moment from \"moment\";\nimport { CButtonGroup, CCard, CCardBody, CCardFooter, CCol, CProgress, CRow } from \"@coreui/react\"; //Chart\n//Components\n\nimport DatePicker from \"../components/DatePicker\";\nimport Chart from \"../components/Chart\";\n\nvar Dashboard = function Dashboard() {\n  var _React$useState = React.useState({\n    startDate: null,\n    endDate: null\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      date = _React$useState2[0],\n      setDate = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    data: []\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      chartData = _React$useState4[0],\n      setChartData = _React$useState4[1];\n\n  var submitFunction = function submitFunction(startDate, endDate) {\n    var startArr = moment(startDate).format(\"YYYY/M/DD\").split(\"/\");\n    var endArr = moment(endDate).format(\"YYYY/M/DD\").split(\"/\");\n    var requestBody = {\n      searchDateEnd: {\n        day: endArr[2],\n        month: endArr[1],\n        year: endArr[0]\n      },\n      searchDateStart: {\n        day: startArr[2],\n        month: startArr[1],\n        year: startArr[0]\n      },\n      deviceType: \"WELL\",\n      measurementType: \"NORMAL\"\n    }; //https://cors-anywhere.herokuapp.com/\n    // try {\n    //   const response = await fetch(\n    //     \"https://cors-anywhere.herokuapp.com/http://mesurit.com:8086/api/data/search/\",\n    //     {\n    //       method: \"POST\",\n    //       mode: \"cors\",\n    //       credentials: \"same-origin\",\n    //       headers: {\n    //         Authorization: `Basic ${btoa(`Guest:WaterFlow`)}`,\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify(requestBody),\n    //     }\n    //   );\n    //   const [result] = await response.json();\n    //   setChartData(result);\n    // } catch (error) {\n    //   console.trace(error);\n    // }\n\n    fetch(\"https://cors-anywhere.herokuapp.com/http://mesurit.com:8086/api/data/search/\", {\n      method: \"POST\",\n      mode: \"cors\",\n      credentials: \"same-origin\",\n      headers: {\n        Authorization: \"Basic \".concat(btoa(\"Guest:WaterFlow\")),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(requestBody)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      return setChartData(res);\n    }); // setChartData({\n    //   chartConfig: {\n    //     input: 1,\n    //     chartType: \"column\",\n    //     textToShow: \"Well\",\n    //     inputType: \"Well\",\n    //     dateFormat: \"%s/%s/%s %s:%s\",\n    //   },\n    //   data: [\n    //     [\"01/08/20 00:00\", 595],\n    //     [\"02/08/20 00:00\", 975],\n    //     [\"03/08/20 00:00\", 1032],\n    //     [\"04/08/20 00:00\", 2408],\n    //     [\"05/08/20 00:00\", 1875],\n    //     [\"06/08/20 00:00\", 338],\n    //     [\"07/08/20 00:00\", 799],\n    //     [\"08/08/20 00:00\", 1293],\n    //     [\"09/08/20 00:00\", 899],\n    //     [\"10/08/20 00:00\", 845],\n    //     [\"11/08/20 00:00\", 15],\n    //     [\"12/08/20 00:00\", 1579],\n    //     [\"13/08/20 00:00\", 1095],\n    //     [\"14/08/20 00:00\", 1221],\n    //     [\"15/08/20 00:00\", 775],\n    //   ],\n    // });\n  };\n\n  function submitFilter(_ref) {\n    var startDate = _ref.startDate,\n        endDate = _ref.endDate;\n\n    if (endDate !== date.endDate) {\n      submitFunction(startDate, endDate);\n    }\n\n    setDate({\n      startDate: startDate,\n      endDate: endDate\n    });\n  } // console.log(\"wtf\", arr);\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CCardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    sm: \"5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    id: \"traffic\",\n    className: \"card-title mb-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Traffic\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small text-muted\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"November 2017\")), /*#__PURE__*/React.createElement(CCol, {\n    sm: \"7\",\n    className: \"d-none d-md-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CButtonGroup, {\n    className: \"float-right mr-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    submitFilter: submitFilter,\n    date: date,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(Chart, {\n    chartData: chartData.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(CCardFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CRow, {\n    className: \"text-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CCol, {\n    md: true,\n    sm: \"12\",\n    className: \"mb-sm-2 mb-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-muted\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Well\"), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, \"1500\"), /*#__PURE__*/React.createElement(CProgress, {\n    className: \"progress-xs mt-2\",\n    precision: 1,\n    color: \"info\",\n    value: 90,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/tiko/Desktop/Ready/Sandbox/src/pages/Dashboard.js"],"names":["React","moment","CButtonGroup","CCard","CCardBody","CCardFooter","CCol","CProgress","CRow","DatePicker","Chart","Dashboard","useState","startDate","endDate","date","setDate","data","chartData","setChartData","submitFunction","startArr","format","split","endArr","requestBody","searchDateEnd","day","month","year","searchDateStart","deviceType","measurementType","fetch","method","mode","credentials","headers","Authorization","btoa","body","JSON","stringify","then","res","json","submitFilter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nimport {\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CProgress,\n  CRow,\n} from \"@coreui/react\";\n//Chart\n//Components\nimport DatePicker from \"../components/DatePicker\";\nimport Chart from \"../components/Chart\";\n\nconst Dashboard = () => {\n  const [date, setDate] = React.useState({ startDate: null, endDate: null });\n  const [chartData, setChartData] = React.useState({ data: [] });\n\n  const submitFunction = (startDate, endDate) => {\n    const startArr = moment(startDate).format(\"YYYY/M/DD\").split(\"/\");\n    const endArr = moment(endDate).format(\"YYYY/M/DD\").split(\"/\");\n\n    const requestBody = {\n      searchDateEnd: {\n        day: endArr[2],\n        month: endArr[1],\n        year: endArr[0],\n      },\n      searchDateStart: {\n        day: startArr[2],\n        month: startArr[1],\n        year: startArr[0],\n      },\n      deviceType: \"WELL\",\n      measurementType: \"NORMAL\",\n    };\n    //https://cors-anywhere.herokuapp.com/\n\n    // try {\n    //   const response = await fetch(\n    //     \"https://cors-anywhere.herokuapp.com/http://mesurit.com:8086/api/data/search/\",\n    //     {\n    //       method: \"POST\",\n    //       mode: \"cors\",\n    //       credentials: \"same-origin\",\n    //       headers: {\n    //         Authorization: `Basic ${btoa(`Guest:WaterFlow`)}`,\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify(requestBody),\n    //     }\n    //   );\n    //   const [result] = await response.json();\n    //   setChartData(result);\n    // } catch (error) {\n    //   console.trace(error);\n    // }\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/http://mesurit.com:8086/api/data/search/\",\n      {\n        method: \"POST\",\n        mode: \"cors\",\n        credentials: \"same-origin\",\n        headers: {\n          Authorization: `Basic ${btoa(`Guest:WaterFlow`)}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(requestBody),\n      }\n    )\n      .then((res) => res.json())\n      .then((res) => setChartData(res));\n    // setChartData({\n    //   chartConfig: {\n    //     input: 1,\n    //     chartType: \"column\",\n    //     textToShow: \"Well\",\n    //     inputType: \"Well\",\n    //     dateFormat: \"%s/%s/%s %s:%s\",\n    //   },\n    //   data: [\n    //     [\"01/08/20 00:00\", 595],\n    //     [\"02/08/20 00:00\", 975],\n    //     [\"03/08/20 00:00\", 1032],\n    //     [\"04/08/20 00:00\", 2408],\n    //     [\"05/08/20 00:00\", 1875],\n    //     [\"06/08/20 00:00\", 338],\n    //     [\"07/08/20 00:00\", 799],\n    //     [\"08/08/20 00:00\", 1293],\n    //     [\"09/08/20 00:00\", 899],\n    //     [\"10/08/20 00:00\", 845],\n    //     [\"11/08/20 00:00\", 15],\n    //     [\"12/08/20 00:00\", 1579],\n    //     [\"13/08/20 00:00\", 1095],\n    //     [\"14/08/20 00:00\", 1221],\n    //     [\"15/08/20 00:00\", 775],\n    //   ],\n    // });\n  };\n\n  function submitFilter({ startDate, endDate }) {\n    if (endDate !== date.endDate) {\n      submitFunction(startDate, endDate);\n    }\n\n    setDate({ startDate, endDate });\n  }\n  // console.log(\"wtf\", arr);\n  return (\n    <>\n      <CCard>\n        <CCardBody>\n          <CRow>\n            <CCol sm=\"5\">\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Traffic\n              </h4>\n              <div className=\"small text-muted\">November 2017</div>\n            </CCol>\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\n              <CButtonGroup className=\"float-right mr-3\">\n                <DatePicker submitFilter={submitFilter} date={date} />\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <Chart chartData={chartData.data} />\n        </CCardBody>\n        <CCardFooter>\n          <CRow className=\"text-center\">\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\n              <div className=\"text-muted\">Well</div>\n              <strong>1500</strong>\n              <CProgress\n                className=\"progress-xs mt-2\"\n                precision={1}\n                color=\"info\"\n                value={90}\n              />\n            </CCol>\n          </CRow>\n        </CCardFooter>\n      </CCard>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}